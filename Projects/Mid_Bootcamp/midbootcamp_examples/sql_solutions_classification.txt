# SQL Questions - Classification

(Use sub queries or views wherever necessary)

1. Create a database called `credit_card_classification`.

create database credit_card_classification_new;
use credit_card_classification_new;


2. Create a table `credit_card_data` with the same columns as given in the csv file. You can find the names of the headers for the table in the `creditcardmarketing.xlsx` file. Use the same column names as the names in the excel file. Please make sure you use the correct data types for each of the columns.

drop table if exists credit_card_data;
create table credit_card_data  (
	Customer_Number	int,
    Offer_Accepted varchar(20),
	Reward varchar(20),  
	Mailer_Type varchar(20),
    Income_Level varchar(20),
    Bank_Accounts_Open int,
    Overdraft_Protection varchar(20) ,
    Credit_Rating varchar(20),
    Credit_Cards_Held int,
    Homes_Owned int,
    Household_Size int,
    Own_Your_Home varchar(20),
    Average_Balance float,
    Q1_Balance float,
    Q2_Balance float,
    Q3_Balance float,
    Q4_Balance float,
    primary key (Customer_Number)
    );
    


3. Import the data from the csv file into the table. Before you import the data into the empty table, make sure that you have deleted the headers from the csv file. (in this case we have already deleted the header names from the csv files). To not modify the original data, if you want you can create a copy of the csv file as well. Note you might have to use the following queries to give permission to SQL to import data from csv files in bulk:

```sql
SHOW VARIABLES LIKE 'local_infile'; -- This query would show you the status of the variable ‘local_infile’. If it is off, use the next command, otherwise you should be good to go

SET GLOBAL local_infile = 1;
```

SHOW VARIABLES LIKE 'local_infile';

SET GLOBAL local_infile = 1;

load data local infile './01-lesson_plans/05-unit_mid_bootcamp_project_week/classification/creditcardmarketing.csv'
into table credit_card_data
fields terminated by ',';


4.  Select all the data from table `credit_card_data` to check if the data was imported correctly.

select * from credit_card_data;




5.  Use the _alter table_ command to drop the column `q4_balance` from the database, as we would not use it in the analysis with SQL. Select all the data from the table to verify if the command worked. Limit your returned results to 10.


alter table credit_card_data
drop column Q4_Balance;

select * from credit_card_data
limit 10;


6.  Use sql query to find how many rows of data you have.

select count(*) from credit_card_data;


7.  Now we will try to find the unique values in some of the categorical columns:

    - What are the unique values in the column `Offer_accepted`?
    - What are the unique values in the column `Reward`?
    - What are the unique values in the column `mailer_type`?
    - What are the unique values in the column `credit_cards_held`?
    - What are the unique values in the column `household_size`?


select distinct Offer_Accepted from credit_card_data;
select distinct Reward from credit_card_data;
select distinct Mailer_Type from credit_card_data;
select distinct Credit_Cards_Held from credit_card_data;
select distinct Household_Size from credit_card_data;




8.  Arrange the data in a decreasing order by the `average_balance` of the house. Return only the `customer_number` of the top 10 customers with the highest `average_balances` in your data.

select Customer_Number from credit_card_data
order by Average_Balance desc
limit 10;


9.  What is the average balance of all the customers in your data?

select round(avg(Average_Balance),2) from credit_card_data;



10. In this exercise we will use  `group by` to check the properties of some of the categorical variables in our data. Note wherever `average_balance` is asked in the questions below, please take the average of the column `average_balance`: 

    - What is the average balance of the customers grouped by `Income Level`? The returned result should have only two columns, income level and `Average balance` of the customers. Use an alias to change the name of the second column.
    - What is the average balance of the customers grouped by `number_of_bank_accounts_open`? The returned result should have only two columns, `number_of_bank_accounts_open` and `Average balance` of the customers. Use an alias to change the name of the second column.
    - What is the average number of credit cards held by customers for each of the credit card ratings? The returned result should have only two columns, rating and average number of credit cards held. Use an alias to change the name of the second column.
    - Is there any correlation between the columns `credit_cards_held` and `number_of_bank_accounts_open`? You can analyse this by grouping the data by one of the variables and then aggregating the results of the other column. Visually check if there is a positive correlation or negative correlation or no correlation between the variables.
    You might also have to check the number of customers in each category (ie number of credit cards held) to assess if that category is well represented in the dataset to include it in your analysis. For eg. If the category is under-represented as compared to other categories, ignore that category in this analysis


select Income_Level, round(avg(Average_Balance),2) as "Average Balance" from credit_card_data
group by Income_Level;

select Bank_Accounts_Open, round(avg(Average_Balance),2) as "Average Balance" from credit_card_data
group by Bank_Accounts_Open;

select Credit_Rating, round(avg(Credit_Cards_Held),2) from credit_card_data
group by Credit_Rating;

select Credit_Cards_Held, avg(Bank_Accounts_Open) as Average_Number_Bank_Accounts, count(*) as Number_of_Customers
from credit_card_data
group by Credit_Cards_Held
order by Credit_Cards_Held;
-- As we can see from the results, if we ignore 'Category 4' as the representation of that category is less, we can say if that there is a negative trend in `Number of Credit Cards held` and 'Number of Bank Accounts Open'



11. Your managers are only interested in the customers with the following properties:

    - Credit rating medium or high
    - Credit cards held 2 or less
    - Owns their own home
    - Household size 3 or more

    For the rest of the things, they are not too concerned. Write a simple query to find what are the options available for them? Can you filter the customers who accepted the offers here?

select Customer_Number, Credit_Rating, Credit_Cards_Held, Own_Your_Home, Household_Size from credit_card_data
where Credit_Rating <> "Low" and Credit_Cards_Held < 3 and Own_Your_Home = "Yes" and Household_Size >= 3 and Offer_Accepted = "Yes" ;




12. Your managers want to find out the list of customers whose average balance is less than the average balance of all the customers in the database. Write a query to show them the list of such customers. You might need to use a subquery for this problem.

select Customer_Number, Average_Balance from credit_card_data
where Average_Balance < (select avg(Average_Balance) from credit_card_data);


13. Since this is something that the senior management is regularly interested in, create a view called `Customers__Balance_View1` of the same query.

create view Customers__Balance_View1 as 
select Customer_Number, Average_Balance from credit_card_data
where Average_Balance < (select avg(Average_Balance) from credit_card_data);



14. What is the number of people who accepted the offer vs number of people who did not?

select Offer_Accepted, count(Offer_Accepted)
from credit_card_data
group by Offer_Accepted;



15. Your managers are more interested in customers with a credit rating of high or medium. What is the difference in average balances of the customers with high credit card rating and low credit card rating?

select credit_rating, round(avg(Average_balance),2)
 from credit_card_data
where credit_rating in ('High','medium')
group by credit_rating; 




16. In the database, which all types of communication (`mailer_type`) were used and with how many customers?

select Mailer_Type, count(distinct Customer_Number) as count  from credit_card_data
group by Mailer_Type;




17. Provide the details of the customer that is the 11th least `Q1_balance` in your database.

select * from credit_card_data 
order by Q1_balance asc 
limit 10,1;





























